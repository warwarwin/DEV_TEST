"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCsrfFetchHeaders = exports.buildCsrfHeaders = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const http_client_1 = require("./http-client");
const logger = (0, util_1.createLogger)({
    package: 'http-client',
    messageContext: 'csrf-token-header'
});
/**
 * Get CSRF token and cookies for a destination and request configuration. The CSRF token and cookies will be retrieved based on the URL of the destination and the custom configuration given by the `requestConfig`.
 * If there is a relative url in the `requestConfig` it will be appended to the destination's URL, an absolute URL overwrites the destination related URL.
 * @param destination - The destination to get the headers from
 * @param requestConfig - An http request configuration containing additional information about the request, like URL or headers
 * @returns A promise to an object containing the CSRF related headers
 * @internal
 */
async function buildCsrfHeaders(destination, requestConfig) {
    const csrfHeaders = await makeCsrfRequest(destination, requestConfig);
    validateCsrfTokenResponse(csrfHeaders);
    return (0, util_1.pickNonNullish)({
        ...(0, util_1.pickIgnoreCase)(csrfHeaders, 'x-csrf-token'),
        cookie: buildCookieHeaderValue((0, util_1.pickValueIgnoreCase)(csrfHeaders, 'set-cookie'))
    });
}
exports.buildCsrfHeaders = buildCsrfHeaders;
/**
 * @param headers - Request header information.
 * @returns CSRF related headers.
 * @internal
 */
function buildCsrfFetchHeaders(headers) {
    const fetchHeader = !(0, util_1.pickValueIgnoreCase)(headers, 'x-csrf-token') && {
        'x-csrf-token': 'Fetch'
    };
    const contentLengthHeaderKey = (0, util_1.first)(Object.keys((0, util_1.pickIgnoreCase)(headers, 'content-length'))) ||
        'content-length';
    return {
        ...fetchHeader,
        ...headers,
        [contentLengthHeaderKey]: 0
    };
}
exports.buildCsrfFetchHeaders = buildCsrfFetchHeaders;
function makeCsrfRequest(destination, requestConfig) {
    const axiosConfig = {
        method: 'head',
        ...requestConfig,
        params: {
            custom: requestConfig.params || {},
            requestConfig: {}
        },
        headers: {
            custom: buildCsrfFetchHeaders(requestConfig.headers),
            requestConfig: {}
        }
    };
    // The S/4 does a redirect if the CSRF token is fetched in case the '/' is not in the URL.
    // TODO: remove once https://github.com/axios/axios/issues/3369 is really fixed. Issue is closed but problem stays.
    const requestConfigWithTrailingSlash = appendSlash(axiosConfig);
    return (0, http_client_1.executeHttpRequest)(destination, requestConfigWithTrailingSlash)
        .then(response => response.headers)
        .catch(error1 => {
        const headers1 = getResponseHeadersFromError(error1);
        if (hasCsrfToken(headers1)) {
            return headers1;
        }
        logger.warn(new util_1.ErrorWithCause(`First attempt to fetch CSRF token failed with the URL: ${requestConfigWithTrailingSlash.url}. Retrying without trailing slash.`, error1));
        const requestConfigWithOutTrailingSlash = removeSlash(axiosConfig);
        return (0, http_client_1.executeHttpRequest)(destination, requestConfigWithOutTrailingSlash)
            .then(response => response.headers)
            .catch(error2 => {
            const headers2 = getResponseHeadersFromError(error2);
            if (hasCsrfToken(headers2)) {
                return headers2;
            }
            logger.warn(new util_1.ErrorWithCause(`Second attempt to fetch CSRF token failed with the URL: ${requestConfigWithOutTrailingSlash.url}. No CSRF token fetched.`, error2));
            // todo suggest to disable csrf token handling when the API is implemented
            return {};
        });
    });
}
function hasCsrfToken(headers) {
    return !!headers['x-csrf-token'];
}
// Non-2xx responses can contain valid csrf tokens in their headers.
function getResponseHeadersFromError(error) {
    var _a;
    return ((_a = error.response) === null || _a === void 0 ? void 0 : _a.headers) || {};
}
function appendSlash(requestConfig) {
    if (!requestConfig.url.endsWith('/')) {
        requestConfig.url = `${requestConfig.url}/`;
    }
    return requestConfig;
}
function removeSlash(requestConfig) {
    if (requestConfig.url.endsWith('/')) {
        requestConfig.url = (0, util_1.removeTrailingSlashes)(requestConfig.url);
    }
    return requestConfig;
}
function validateCsrfTokenResponse(responseHeaders) {
    if (!responseHeaders['x-csrf-token']) {
        logger.warn('Destination did not return a CSRF token. This may cause a failure when sending the OData request.');
    }
    if (!responseHeaders['set-cookie']) {
        logger.warn('CSRF header response does not include cookies.');
    }
    return responseHeaders;
}
function buildCookieHeaderValue(cookies) {
    if (cookies && cookies.length) {
        return cookies.map((cookie) => cookie.split(';')[0]).join(';');
    }
}
//# sourceMappingURL=csrf-token-header.js.map