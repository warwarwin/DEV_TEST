"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserToken = exports.getClientCredentialsToken = exports.getSubdomainAndZoneId = void 0;
const xssec = __importStar(require("@sap/xssec"));
const opossum_1 = __importDefault(require("opossum"));
const subdomain_replacer_1 = require("./subdomain-replacer");
const jwt_1 = require("./jwt");
const resilience_options_1 = require("./resilience-options");
const environment_accessor_1 = require("./environment-accessor");
let circuitBreaker;
async function wrapInTimeout(promise, timeout) {
    return Promise.race([promise, (0, resilience_options_1.timeoutPromise)(timeout)]);
}
function executeFunction(fn, ...parameters) {
    return fn(...parameters);
}
function getCircuitBreaker() {
    if (!circuitBreaker) {
        circuitBreaker = new opossum_1.default(executeFunction, resilience_options_1.circuitBreakerDefaultOptions);
    }
    return circuitBreaker;
}
/**
 * Wrap a function in a circuit breaker. Important if you trigger this recursively you have to adjust the parameters to avoid an infinite stack.
 * @param fn - Function to wrap.
 * @returns A function to be called with the original parameters.
 */
function wrapInCircuitBreaker(fn) {
    return (...parameters) => getCircuitBreaker().fire(fn, ...parameters);
}
/**
 * Get subdomain and zoneId value from a given JWT.
 * @param jwt - A JWT from the current user.
 * @returns subdomain and zoneId from the JWT
 * @internal
 */
function getSubdomainAndZoneId(jwt) {
    let subdomain = null;
    let zoneId = null;
    if (jwt) {
        const jwtPayload = typeof jwt === 'string' ? (0, jwt_1.decodeJwt)(jwt) : jwt;
        if (jwtPayload.iss) {
            subdomain = (0, subdomain_replacer_1.parseSubdomain)(jwtPayload.iss);
        }
        if (jwtPayload.zid) {
            zoneId = jwtPayload.zid;
        }
    }
    return { subdomain, zoneId };
}
exports.getSubdomainAndZoneId = getSubdomainAndZoneId;
/**
 * Make a user token request against the XSUAA service.
 * @param service - Service as it is defined in the environment variable.
 * @param userJwt - User JWT.
 * @param options - Options to influence resilience behavior (see {@link ResilienceOptions}). By default, usage of a circuit breaker is enabled.
 * @returns Client credentials token.
 */
async function getClientCredentialsToken(service, userJwt, options) {
    const { enableCircuitBreaker, timeout } = {
        ...resilience_options_1.defaultResilienceBTPServices,
        ...options
    };
    if (enableCircuitBreaker) {
        return wrapInCircuitBreaker(getClientCredentialsToken)(service, userJwt, {
            enableCircuitBreaker: false,
            timeout
        });
    }
    const serviceCredentials = (0, environment_accessor_1.resolveService)(service).credentials;
    const subdomainAndZoneId = getSubdomainAndZoneId(userJwt);
    const xssecPromise = new Promise((resolve, reject) => {
        xssec.requests.requestClientCredentialsToken(subdomainAndZoneId.subdomain, serviceCredentials, null, subdomainAndZoneId.zoneId, (err, token, tokenResponse) => {
            const isServiceInterface = (serviceInterface) => !!serviceInterface.name;
            const serviceName = isServiceInterface(service)
                ? service.name
                : service;
            return err
                ? reject(`Error in fetching the token for service ${serviceName}: ${err.message}`)
                : resolve(tokenResponse);
        });
    });
    return wrapInTimeout(xssecPromise, timeout);
}
exports.getClientCredentialsToken = getClientCredentialsToken;
/**
 * Make a user token request against the XSUAA service.
 * @param service - Service as it is defined in the environment variable.
 * @param userJwt - User JWT.
 * @param options - Options to influence resilience behavior (see {@link ResilienceOptions}). By default, usage of a circuit breaker is enabled.
 * @returns User token.
 */
function getUserToken(service, userJwt, options) {
    const { enableCircuitBreaker, timeout } = {
        ...resilience_options_1.defaultResilienceBTPServices,
        ...options
    };
    if (enableCircuitBreaker) {
        return wrapInCircuitBreaker(getUserToken)(service, userJwt, {
            enableCircuitBreaker: false,
            timeout
        });
    }
    const subdomainAndZoneId = getSubdomainAndZoneId(userJwt);
    const xssecPromise = new Promise((resolve, reject) => xssec.requests.requestUserToken(userJwt, service.credentials, null, null, subdomainAndZoneId.subdomain, subdomainAndZoneId.zoneId, (err, token) => (err ? reject(err) : resolve(token))));
    return wrapInTimeout(xssecPromise, timeout);
}
exports.getUserToken = getUserToken;
//# sourceMappingURL=xsuaa-service.js.map