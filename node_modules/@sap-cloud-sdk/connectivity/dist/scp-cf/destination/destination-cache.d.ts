import { Cache, CacheEntry } from '../cache';
import { JwtPayload } from '../jsonwebtoken-type';
import { Destination } from './destination-service-types';
import { DestinationsByType } from './destination-accessor-types';
/**
 * Enumerator that selects the isolation type of destination in cache.
 * The used isolation strategy is either `Tenant` or `Tenant_User` because we want to get results for subaccount and provider tenants which rules out no-isolation or user isolation.
 */
export declare enum IsolationStrategy {
    Tenant = "Tenant",
    Tenant_User = "TenantUser"
}
/**
 * Interface to implement custom destination caching.
 * To set a custom implementation, call method {@link setDestinationCache} and pass the cache instance.
 */
export interface DestinationCacheInterface {
    hasKey(key: string): Promise<boolean>;
    get(key: string | undefined): Promise<Destination | undefined>;
    set(key: string | undefined, item: CacheEntry<Destination>): Promise<void>;
    clear(): Promise<void>;
}
/**
 * @internal
 * This wrapper class wraps methods of {@link Cache} class as asynchronous methods.
 */
export declare class DefaultDestinationCache implements DestinationCacheInterface {
    cache: Cache<Destination>;
    constructor(validityTimeInMs?: number);
    /**
     * Specifies whether an entry with a given key is defined in cache.
     * @param key - The entry's key.
     * @returns A boolean value that indicates whether the entry exists in cache.
     */
    hasKey(key: string): Promise<boolean>;
    /**
     * Getter of cached entries.
     * @param key - The key of the entry to retrieve.
     * @returns The corresponding entry to the provided key if it is still valid, returns `undefined` otherwise.
     */
    get(key: string | undefined): Promise<Destination | undefined>;
    /**
     * Setter of entries in cache.
     * @param key - The entry's key.
     * @param item - The entry to cache.
     */
    set(key: string | undefined, item: CacheEntry<Destination>): Promise<void>;
    /**
     * Clear all cached items.
     */
    clear(): Promise<void>;
}
/**
 * @internal
 */
export interface DestinationCacheType {
    /**
     * @internal
     */
    retrieveDestinationFromCache: (decodedJwt: Record<string, any>, name: string, isolation: IsolationStrategy) => Promise<Destination | undefined>;
    /**
     * @internal
     */
    cacheRetrievedDestination: (decodedJwt: Record<string, any>, destination: Destination, isolation: IsolationStrategy) => Promise<void>;
    /**
     * @internal
     */
    cacheRetrievedDestinations: (decodedJwt: Record<string, any>, retrievedDestinations: DestinationsByType, isolation: IsolationStrategy) => Promise<void>;
    /**
     * @internal
     */
    clear: () => Promise<void>;
    /**
     * @internal
     */
    getCacheInstance: () => DestinationCacheInterface;
}
/**
 * DestinationCache constructor.
 * @param cache - Cache object which is used in DestiantionCache
 * @returns A destination cache object.
 * @internal
 */
export declare const DestinationCache: (cache?: DestinationCacheInterface) => DestinationCacheType;
/**
 * Calculates a cache key based on the jwt and destination name for the given isolation strategy.
 * Cache keys for strategies are non-overlapping, i.e. using a cache key for strategy {@link IsolationStrategy.Tenant}
 * will not result in a cache hit for a destination that has been cached with strategy {@link IsolationStrategy.Tenant_User}.
 * @param decodedJwt - The decoded JWT of the current request.
 * @param destinationName - The name of the destination.
 * @param isolationStrategy - The strategy used to isolate cache entries.
 * @returns The cache key.
 * @internal
 */
export declare function getDestinationCacheKey(decodedJwt: Record<string, any>, destinationName: string, isolationStrategy?: IsolationStrategy): string | undefined;
/**
 * Sets the custom destination cache instance.
 * Call this method with an instance of {@link DestinationCacheInterface} to override the default cache instance set by the SDK.
 *
 * NOTE: This function should be called at the beginning before any calls to either {@link getDestination} or {@link @sap-cloud-sdk/http-client!executeHttpRequest}.
 * @param cache - An instance of {@link DestinationCacheInterface}.
 */
export declare function setDestinationCache(cache: DestinationCacheInterface): void;
/**
 * @internal
 */
export declare let destinationCache: DestinationCacheType;
/**
 * Determin the default Isolation strategy if not given as option.
 * @param jwt - JWT to determine the default isolation strategy
 * @returns The isolation strategy based on the JWT. If no JWT is given it defaults to Tenant isolation
 * @internal
 */
export declare function getDefaultIsolationStrategy(jwt: JwtPayload | undefined): IsolationStrategy;
//# sourceMappingURL=destination-cache.d.ts.map