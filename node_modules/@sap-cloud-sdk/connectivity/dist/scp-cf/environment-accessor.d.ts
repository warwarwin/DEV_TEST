import { JwtPayload } from './jsonwebtoken-type';
import { DestinationServiceCredentials, Service, XsuaaServiceCredentials } from './environment-accessor-types';
/**
 * Basic Credentials Getter from Destination service credentials needed for JWT generator.
 *
 * @returns Basic credentials.
 * @internal
 */
export declare function getDestinationBasicCredentials(): BasicCredentials;
/**
 * Destination credentials getter.
 *
 * @returns A list of 'credentials' objects in 'destination' service.
 * @internal
 */
export declare function getDestinationServiceCredentialsList(): DestinationServiceCredentials[];
/**
 * Credentials list getter for a given service.
 * @param service - Service name
 * @returns Fetched credentials objects of existing service in 'VCAP_SERVICES'.
 * @internal
 */
export declare function getServiceCredentialsList(service: string): any[];
/**
 * Services getter for a given service.
 * @param service - Service name.
 * @returns List of service bindings of the given type. Returns an empty array if no service binding exists for the given type.
 * @internal
 */
export declare function getServiceList(service: string): Service[];
/**
 * Returns the first found instance for the given service type.
 * @param service - The service type.
 * @returns The first found service.
 * @internal
 */
export declare function getService(service: string): Service | undefined;
/**
 * Filters services based on service instance name. Throws an error if no or multiple services exist.
 * @internal
 */
export declare function getServiceByInstanceName(serviceInstanceName: string): Service | undefined;
/**
 * Get destination service if one is present.
 *
 * @returns Destination service
 * @throws Error in case no destination service is found in the VCAP variables
 * @internal
 */
export declare function getDestinationService(): Service;
/**
 * Destination URI getter
 * NOTICE: If there exist more than one destination/uri, the function
 * returns the first entry.
 *
 * @returns The first existing uri in destination or `null`, if not found.
 * @internal
 */
export declare function getDestinationServiceUri(): string | null;
/**
 * Takes a decoded JWT and uses the client_id and audience claims to determine the XSUAA service instance
 * that issued the JWT. Returns the credentials if a match is found, otherwise throws an error.
 * If no decoded JWT is specified, then returns the first existing XSUAA credential service plan "application".
 * @param token - Either an encoded or decoded JWT.
 * @returns The credentials for a match, otherwise `null`.
 * @internal
 */
export declare function getXsuaaServiceCredentials(token?: JwtPayload | string): XsuaaServiceCredentials;
/**
 * Takes a string that represents the service type and resolves it by calling {@link getService}.
 * If the parameter is already an instance of {@link Service}, it is returned directly.
 *
 * Throws an error when no service can be found for the given type.
 * @param service - A string representing the service type or a {@link Service} instance.
 * @returns A {@link Service} instance.
 * @internal
 */
export declare function resolveService(service: string | Service): Service;
interface BasicCredentials {
    clientid: string;
    clientsecret: string;
}
export {};
//# sourceMappingURL=environment-accessor.d.ts.map