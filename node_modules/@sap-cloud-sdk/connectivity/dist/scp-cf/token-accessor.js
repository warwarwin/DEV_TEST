"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jwtBearerToken = exports.serviceToken = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const jwt_1 = require("./jwt");
const client_credentials_token_cache_1 = require("./client-credentials-token-cache");
const environment_accessor_1 = require("./environment-accessor");
const subdomain_replacer_1 = require("./subdomain-replacer");
const xsuaa_service_1 = require("./xsuaa-service");
/**
 * Returns an access token that can be used to call the given service. The token is fetched via a client credentials grant with the credentials of the given service.
 * If multiple instances of the provided service exist, the first instance will be selected.
 * When a JWT is passed, the tenant of the JWT will be used when performing the grant.
 * When no JWT is passed, the grant will be performed using the provider tenant.
 *
 * Throws an error if there is no instance of the given service type or the XSUAA service, or if the request to the XSUAA service fails.
 * @param service - The type of the service or an instance of {@link Service}.
 * @param options - Options to influence caching and resilience behavior (see {@link CachingOptions} and {@link ResilienceOptions}, respectively) and a JWT. By default, caching and usage of a circuit breaker are enabled.
 * @returns Access token.
 */
async function serviceToken(service, options) {
    const opts = {
        useCache: true,
        enableCircuitBreaker: true,
        ...options
    };
    service = (0, environment_accessor_1.resolveService)(service);
    const serviceCredentials = service.credentials;
    // TODO 2.0 Once the xssec supports caching remove all xsuaa related content here and use their cache.
    if (opts.useCache) {
        const xsuaa = multiTenantXsuaaCredentials(options);
        const cachedToken = client_credentials_token_cache_1.clientCredentialsTokenCache.getToken(xsuaa.url, serviceCredentials.clientid);
        if (cachedToken) {
            return cachedToken.access_token;
        }
    }
    try {
        const token = await (0, xsuaa_service_1.getClientCredentialsToken)(service, options === null || options === void 0 ? void 0 : options.jwt, options);
        if (opts.useCache) {
            const xsuaa = multiTenantXsuaaCredentials(options);
            client_credentials_token_cache_1.clientCredentialsTokenCache.cacheToken(xsuaa.url, serviceCredentials.clientid, token);
        }
        return token.access_token;
    }
    catch (err) {
        throw new util_1.ErrorWithCause(`Could not fetch client credentials token for service of type "${service.label}".`, err);
    }
}
exports.serviceToken = serviceToken;
/**
 * Returns a jwt bearer token that can be used to call the given service.
 * The token is fetched via a JWT bearer token grant using the user token + client credentials.
 *
 * Throws an error if there is no instance of the given service type or the XSUAA service, or if the request to the XSUAA service fails.
 * @param jwt - The JWT of the user for whom the access token should be fetched.
 * @param service - The type of the service or an instance of {@link Service}.
 * @param options - Options to influence resilience behavior (see {@link ResilienceOptions}). By default, usage of a circuit breaker is enabled.
 * @returns A jwt bearer token.
 */
async function jwtBearerToken(jwt, service, options) {
    const resolvedService = (0, environment_accessor_1.resolveService)(service);
    const opts = {
        enableCircuitBreaker: true,
        ...options
    };
    return (0, xsuaa_service_1.getUserToken)(resolvedService, jwt, opts);
}
exports.jwtBearerToken = jwtBearerToken;
function multiTenantXsuaaCredentials(options = {}) {
    const xsuaa = options.xsuaaCredentials
        ? { ...options.xsuaaCredentials }
        : (0, environment_accessor_1.getXsuaaServiceCredentials)(options.jwt);
    if (options.jwt) {
        const decodedJwt = typeof options.jwt === 'string' ? (0, jwt_1.decodeJwt)(options.jwt) : options.jwt;
        if (!decodedJwt.iss) {
            throw Error('Property `iss` is missing in the provided user token.');
        }
        xsuaa.url = (0, subdomain_replacer_1.replaceSubdomain)(decodedJwt.iss, xsuaa.url);
    }
    return xsuaa;
}
//# sourceMappingURL=token-accessor.js.map