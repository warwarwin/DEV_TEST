/// <reference types="node" />
import { IncomingMessage } from 'http';
import { JwtPayload, JwtWithPayloadObject } from './jsonwebtoken-type';
import { TokenKey } from './xsuaa-service-types';
import { Cache } from './cache';
/**
 * Decode JWT.
 * @param token - JWT to be decoded.
 * @returns Decoded payload.
 */
export declare function decodeJwt(token: string): JwtPayload;
/**
 * Decode JWT and return the complete decoded token.
 * @param token - JWT to be decoded.
 * @returns Decoded token containing payload, header and signature.
 * @internal
 */
export declare function decodeJwtComplete(token: string): JwtWithPayloadObject;
/**
 * Retrieve JWT from a request that is based on the node `IncomingMessage`. Fails if no authorization header is given or has the wrong format. Expected format is 'Bearer <TOKEN>'.
 * @param req - Request to retrieve the JWT from.
 * @returns JWT found in header.
 */
export declare function retrieveJwt(req: IncomingMessage): string | undefined;
/**
 * Checks if the given JWT is from the XSUAA or from an alternative issuer based on the iss property and the uaa domain of the XSUAA.
 * @param decodedUserJwt - JWT to be checked.
 * @returns True if JWT is issued by XSUAA
 * @internal
 */
export declare function isXsuaaToken(decodedUserJwt: JwtWithPayloadObject): boolean;
/**
 * Verifies the given JWT and returns the decoded payload.
 * @param token - JWT to be verified
 * @param options - Options to control certain aspects of JWT verification behavior.
 * @returns A Promise to the decoded and verified JWT.
 *  @internal
 */
export declare function verifyJwt(token: string, options?: VerifyJwtOptions): Promise<JwtPayload>;
/**
 * Options to control certain aspects of JWT verification behavior.
 */
export interface VerifyJwtOptions {
    /**
     * The verification keys are cached if set to true.
     */
    cacheVerificationKeys?: boolean;
}
/**
 * 15 minutes is the default value used by the xssec lib.
 * @internal
 */
export declare const verificationKeyCache: Cache<TokenKey>;
/**
 * Get the issuer URL of a decoded JWT.
 * @param decodedToken - Token to read the issuer URL from.
 * @returns The issuer URL if available.
 * @internal
 */
export declare function issuerUrl(decodedToken: JwtPayload): string | undefined;
/**
 * Retrieve the audiences of a decoded JWT based on the audiences and scopes in the token.
 * @param decodedToken - Token to retrieve the audiences from.
 * @returns A set of audiences.
 * @internal
 */
export declare function audiences(decodedToken: JwtPayload): Set<string>;
/**
 * Wraps the access token in header's authorization.
 * @param token - Token to attach in request header
 * @returns The request header that holds the access token
 * @internal
 */
export declare function wrapJwtInHeader(token: string): {
    headers: {
        Authorization: string;
        [key: string]: any;
    };
};
/**
 * @internal
 * @param jwtPayload - The jwt payload.
 * @param property - The property to be read.
 * @returns the property if present.
 */
export declare function readPropertyWithWarn(jwtPayload: JwtPayload, property: string): any;
/**
 * @internal
 */
export type JwtKeyMapping<InterfaceT, JwtKeysT> = {
    [key in keyof InterfaceT]: {
        keyInJwt: JwtKeysT extends string ? JwtKeysT : keyof JwtKeysT;
        extractorFunction: (jwtPayload: JwtPayload) => any;
    };
};
/**
 * Checks if a given key is present in the decoded JWT. If not, an error is thrown.
 * @param key - The key of the representation in typescript
 * @param mapping - The mapping between the typescript keys and the JWT key
 * @param jwtPayload - JWT payload to check fo the given key.
 * @internal
 */
export declare function checkMandatoryValue<InterfaceT, JwtKeysT>(key: keyof InterfaceT, mapping: JwtKeyMapping<InterfaceT, JwtKeysT>, jwtPayload: JwtPayload): void;
/**
 * Object holding a decoded JWT payload received by decoding the encoded string also in this object.
 * @internal
 */
export interface JwtPair {
    /**
     * @internal
     */
    decoded: JwtPayload;
    /**
     * @internal
     */
    encoded: string;
}
/**
 * Build JwtPair from an encoded JWT.
 * @internal
 */
export declare function getJwtPair(encodedJwt: string): JwtPair;
/**
 * The user JWT can be a full JWT containing user information but also a reduced one setting only the iss value
 * This method divides the two cases.
 * @param token - Token to be investigated
 * @returns Boolean value with true if the input is a UserJwtPair
 * @internal
 */
export declare function isUserToken(token: JwtPair | undefined): token is JwtPair;
//# sourceMappingURL=jwt.d.ts.map