// import types from '../lib/core'
import { ReflectedModel, LinkedModel } from './reflect'
import { CSN as csn, Definition } from './csn'

type UserInput = string | { id: string; attr: Record<string, string>; roles: Record<string, string> } | User

export type Association = Definition
export type Composition = Association
export type entity = Definition
export type event = Definition
export type type = Definition
export type array = Definition
export type struct = Definition


export class User {
  constructor(obj?: UserInput)
  id: string

  /**
   * @deprecated Use https://cap.cloud.sap/docs/node.js/events#locale instead
   */
  locale: string

  /**
   * @deprecated Use https://cap.cloud.sap/docs/node.js/events#tenant instead
   */
  tenant: string | undefined
  attr: Record<string, string>
  roles: Record<string, string>
  static Privileged: typeof Privileged
  is(role: string): boolean
}

/**
 * Subclass for executing code with superuser privileges.
 */
declare class Privileged extends User {
  constructor()
  is(): boolean
}

declare class cds {
  /**
   * Turns the given plain CSN model into a linked model
   * @see [capire](https://cap.cloud.sap/docs/node.js/cds-reflect)
   */
  linked(model: csn): LinkedModel

  /**
   * Turns the given plain CSN model into a reflected model
   * @see [capire](https://cap.cloud.sap/docs/node.js/cds-reflect)
   */
  reflect(model: csn): ReflectedModel

  /**
   * Represents the user in a given context.
   * @see [capire docs](https://cap.cloud.sap/docs/node.js/authentication#cds-user)
   */
  User: typeof User

  // infer (query : cqn, model : csn) : LinkedDefinition

  builtin: {
    /**
     * Base classes of linked definitions from reflected models.
     * @see [capire](https://cap.cloud.sap/docs/node.js/cds-reflect#cds-builtin-classes)
     */
    classes: {
      Association: Definition
      Composition: Definition
      context: Definition
      service: Definition
      type: Definition
      array: Definition
      struct: Definition
      entity: Definition
      event: Definition
    }
    types: {}
  }

  /**
   * Base class for linked Associations from reflected models.
   * @see [capire](https://cap.cloud.sap/docs/node.js/cds-reflect#cds-Association)
   */
  Association: Association

  /**
   * Base class for linked Compositions from reflected models.
   * @see [capire](https://cap.cloud.sap/docs/node.js/cds-reflect#cds-Association)
   */
  Composition: Composition

  /**
   * Base class for linked entities from reflected models.
   * @see [capire](https://cap.cloud.sap/docs/node.js/cds-reflect#cds-entity)
   */
  entity: entity

  event: event
  type: type
  array: array
  struct: struct

  /**
   * Add aspects to a given object, for example:
   *
   *    extend (Object.prototype) .with (class {
   *       get foo() { return ... }
   *       bar() {...}
   *    }.prototype)
   */
  extend<T>(target: T): {
    with<X, Y, Z>(x: X, y: Y, z: Z): T & X & Y & Z
    with<X, Y>(x: X, y: Y): T & X & Y
    with<X>(x: X): T & X
  }

  /**
   * Equip a given facade object with getters for lazy-loading modules instead
   * of static requires. Example:
   *
   *    const facade = lazify ({
   *       sub: lazy => require ('./sub-module')
   *    })
   *
   * The first usage of `facade.sub` will load the sub module
   * using standard Node.js's `module.require` functions.
   */
  lazify: <T>(target: T) => T

  /**
   * Prepare a node module for lazy-loading submodules instead
   * of static requires. Example:
   *
   *    require = lazify (module) //> turns require into a lazy one
   *    const facade = module.exports = {
   *       sub: require ('./sub-module')
   *    })
   *
   * The first usage of `facade.sub` will load the sub module
   * using standard Node.js's `module.require` functions.
   */
  lazified: <T>(target: T) => T

  /**
   * Provides a graceful shutdown for running servers, by first emitting `cds.emit('shutdown')`.
   * @see [capire](https://cap.cloud.sap/docs/node.js/cds-facade#cds-exit)
   */
  exit(): void


  /**
   * Access to the configuration for Node.js runtime and tools.
   * The object is the effective result of configuration merged from various sources,
   * filtered through the currently active profiles, thus highly dependent on the current working
   * directory and process environment.
   */
  env : {
    build: any,
    hana: any,
    i18n: any,
    mtx: any,
    requires: any,
    folders: any,
    odata: any,
    query: any,
    sql: any
  }

  requires: any
  version: string
  home: string
  root: string

}

// & typeof import ('../lib/index')
export default cds
